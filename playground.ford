contract Mappings;

let m1 = {
    a: {
        b: {
            c: 1
        }
    }
};

let o = m1['a'];

/*
contract PrimitiveTypes;

let aString = "Hello World!"; // string
let aBool = true; // boolean
let aUint8 = u8(255); // uint8
let anAddress = address("0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c"); // address
*/

/*
contract HelloWorld;
let greet = "Hello World!";
*/

/*
contract Counter;
let count; // uint256
// Function to get the current count
def get {
    return 2 * count;
}
*/

/*
let myAddress = address("0x1E3");
let yourAddress = address("0x1E4");
let map = {};
map[myAddress] = 1;
map[yourAddress] = 1e18;
*/

/*
let myAddress = address("0x1E3");
let yourAddress = address("0x1E4");
let oneWei = wei(1);
let oneEther = ether(1);
let count = 0;

// mappings
let A = {};
A[myAddress] = oneWei;
A[yourAddress] = oneEther;

let myList = list(myAddress, yourAddress);

def decrement {
    count = count - 1;
}

def receive(amount) {
    A[msg.sender] = amount;

    emit("Received", {
        address: myAddress,
        amount: 1,
        message: "some message"
    });

    revert();
}

def getCount {
    return count;
}
*/
